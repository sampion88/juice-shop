import * as pulumi from "@pulumi/pulumi";
import * as azure_native from "@pulumi/azure-native";

const vault = new azure_native.keyvault.Vault("vault", {
  location: "westus",
  properties: {
    accessPolicies: [
      {
        objectId: "00000000-0000-0000-0000-000000000000",
        permissions: {
          certificates: [
            azure_native.keyvault.CertificatePermissions.Get,
            azure_native.keyvault.CertificatePermissions.List,
            azure_native.keyvault.CertificatePermissions.Delete,
            azure_native.keyvault.CertificatePermissions.Create,
            azure_native.keyvault.CertificatePermissions.Import,
            azure_native.keyvault.CertificatePermissions.Update,
            azure_native.keyvault.CertificatePermissions.Managecontacts,
            azure_native.keyvault.CertificatePermissions.Getissuers,
            azure_native.keyvault.CertificatePermissions.Listissuers,
            azure_native.keyvault.CertificatePermissions.Setissuers,
            azure_native.keyvault.CertificatePermissions.Deleteissuers,
            azure_native.keyvault.CertificatePermissions.Manageissuers,
            azure_native.keyvault.CertificatePermissions.Recover,
            azure_native.keyvault.CertificatePermissions.Purge,
          ],
          keys: [
            azure_native.keyvault.KeyPermissions.Encrypt,
            azure_native.keyvault.KeyPermissions.Decrypt,
            azure_native.keyvault.KeyPermissions.WrapKey,
            azure_native.keyvault.KeyPermissions.UnwrapKey,
            azure_native.keyvault.KeyPermissions.Sign,
            azure_native.keyvault.KeyPermissions.Verify,
            azure_native.keyvault.KeyPermissions.Get,
            azure_native.keyvault.KeyPermissions.List,
            azure_native.keyvault.KeyPermissions.Create,
            azure_native.keyvault.KeyPermissions.Update,
            azure_native.keyvault.KeyPermissions.Import,
            azure_native.keyvault.KeyPermissions.Delete,
            azure_native.keyvault.KeyPermissions.Backup,
            azure_native.keyvault.KeyPermissions.Restore,
            azure_native.keyvault.KeyPermissions.Recover,
            azure_native.keyvault.KeyPermissions.Purge,
          ],
          secrets: [
            azure_native.keyvault.SecretPermissions.Get,
            azure_native.keyvault.SecretPermissions.List,
            azure_native.keyvault.SecretPermissions.Set,
            azure_native.keyvault.SecretPermissions.Delete,
            azure_native.keyvault.SecretPermissions.Backup,
            azure_native.keyvault.SecretPermissions.Restore,
            azure_native.keyvault.SecretPermissions.Recover,
            azure_native.keyvault.SecretPermissions.Purge,
          ],
        },
        tenantId: "00000000-0000-0000-0000-000000000000",
      },
    ],
    enabledForDeployment: true,
    enabledForDiskEncryption: true,
    enabledForTemplateDeployment: true,
    publicNetworkAccess: "Enabled",
    sku: {
      family: azure_native.keyvault.SkuFamily.A,
      name: azure_native.keyvault.SkuName.Standard,
    },
    tenantId: "00000000-0000-0000-0000-000000000000",
  },
  resourceGroupName: "sample-resource-group",
  vaultName: "sample-vault",
});

const vault2 = new azure_native.keyvault.Vault("vault2", {
  location: "westus",
  properties: {
    accessPolicies: [
      {
        objectId: "00000000-0000-0000-0000-000000000000",
        permissions: {
          certificates: [
            azure_native.keyvault.CertificatePermissions.Get,
            azure_native.keyvault.CertificatePermissions.List,
            azure_native.keyvault.CertificatePermissions.Delete,
            azure_native.keyvault.CertificatePermissions.Create,
            azure_native.keyvault.CertificatePermissions.Import,
            azure_native.keyvault.CertificatePermissions.Update,
            azure_native.keyvault.CertificatePermissions.Managecontacts,
            azure_native.keyvault.CertificatePermissions.Getissuers,
            azure_native.keyvault.CertificatePermissions.Listissuers,
            azure_native.keyvault.CertificatePermissions.Setissuers,
            azure_native.keyvault.CertificatePermissions.Deleteissuers,
            azure_native.keyvault.CertificatePermissions.Manageissuers,
            azure_native.keyvault.CertificatePermissions.Recover,
            azure_native.keyvault.CertificatePermissions.Purge,
          ],
          keys: [
            azure_native.keyvault.KeyPermissions.Encrypt,
            azure_native.keyvault.KeyPermissions.Decrypt,
            azure_native.keyvault.KeyPermissions.WrapKey,
            azure_native.keyvault.KeyPermissions.UnwrapKey,
            azure_native.keyvault.KeyPermissions.Sign,
            azure_native.keyvault.KeyPermissions.Verify,
            azure_native.keyvault.KeyPermissions.Get,
            azure_native.keyvault.KeyPermissions.List,
            azure_native.keyvault.KeyPermissions.Create,
            azure_native.keyvault.KeyPermissions.Update,
            azure_native.keyvault.KeyPermissions.Import,
            azure_native.keyvault.KeyPermissions.Delete,
            azure_native.keyvault.KeyPermissions.Backup,
            azure_native.keyvault.KeyPermissions.Restore,
            azure_native.keyvault.KeyPermissions.Recover,
            azure_native.keyvault.KeyPermissions.Purge,
          ],
          secrets: [
            azure_native.keyvault.SecretPermissions.Get,
            azure_native.keyvault.SecretPermissions.List,
            azure_native.keyvault.SecretPermissions.Set,
            azure_native.keyvault.SecretPermissions.Delete,
            azure_native.keyvault.SecretPermissions.Backup,
            azure_native.keyvault.SecretPermissions.Restore,
            azure_native.keyvault.SecretPermissions.Recover,
            azure_native.keyvault.SecretPermissions.Purge,
          ],
        },
        tenantId: "00000000-0000-0000-0000-000000000000",
      },
    ],
    enabledForDeployment: true,
    enabledForDiskEncryption: true,
    enabledForTemplateDeployment: true,
    publicNetworkAccess: "Disabled",
    sku: {
      family: azure_native.keyvault.SkuFamily.A,
      name: azure_native.keyvault.SkuName.Standard,
    },
    tenantId: "00000000-0000-0000-0000-000000000000",
  },
  resourceGroupName: "sample-resource-group",
  vaultName: "sample-vault",
});

const vault3 = new azure_native.keyvault.Vault("vault3", {
  location: "westus",
  properties: {
    accessPolicies: [
      {
        objectId: "00000000-0000-0000-0000-000000000000",
        permissions: {
          certificates: [
            azure_native.keyvault.CertificatePermissions.Get,
            azure_native.keyvault.CertificatePermissions.List,
            azure_native.keyvault.CertificatePermissions.Delete,
            azure_native.keyvault.CertificatePermissions.Create,
            azure_native.keyvault.CertificatePermissions.Import,
            azure_native.keyvault.CertificatePermissions.Update,
            azure_native.keyvault.CertificatePermissions.Managecontacts,
            azure_native.keyvault.CertificatePermissions.Getissuers,
            azure_native.keyvault.CertificatePermissions.Listissuers,
            azure_native.keyvault.CertificatePermissions.Setissuers,
            azure_native.keyvault.CertificatePermissions.Deleteissuers,
            azure_native.keyvault.CertificatePermissions.Manageissuers,
            azure_native.keyvault.CertificatePermissions.Recover,
            azure_native.keyvault.CertificatePermissions.Purge,
          ],
          keys: [
            azure_native.keyvault.KeyPermissions.Encrypt,
            azure_native.keyvault.KeyPermissions.Decrypt,
            azure_native.keyvault.KeyPermissions.WrapKey,
            azure_native.keyvault.KeyPermissions.UnwrapKey,
            azure_native.keyvault.KeyPermissions.Sign,
            azure_native.keyvault.KeyPermissions.Verify,
            azure_native.keyvault.KeyPermissions.Get,
            azure_native.keyvault.KeyPermissions.List,
            azure_native.keyvault.KeyPermissions.Create,
            azure_native.keyvault.KeyPermissions.Update,
            azure_native.keyvault.KeyPermissions.Import,
            azure_native.keyvault.KeyPermissions.Delete,
            azure_native.keyvault.KeyPermissions.Backup,
            azure_native.keyvault.KeyPermissions.Restore,
            azure_native.keyvault.KeyPermissions.Recover,
            azure_native.keyvault.KeyPermissions.Purge,
          ],
          secrets: [
            azure_native.keyvault.SecretPermissions.Get,
            azure_native.keyvault.SecretPermissions.List,
            azure_native.keyvault.SecretPermissions.Set,
            azure_native.keyvault.SecretPermissions.Delete,
            azure_native.keyvault.SecretPermissions.Backup,
            azure_native.keyvault.SecretPermissions.Restore,
            azure_native.keyvault.SecretPermissions.Recover,
            azure_native.keyvault.SecretPermissions.Purge,
          ],
        },
        tenantId: "00000000-0000-0000-0000-000000000000",
      },
    ],
    enabledForDeployment: true,
    enabledForDiskEncryption: true,
    enabledForTemplateDeployment: true,
    publicNetworkAccess: azure_native.keyvault.PublicNetworkAccess.Enabled,
    sku: {
      family: azure_native.keyvault.SkuFamily.A,
      name: azure_native.keyvault.SkuName.Standard,
    },
    tenantId: "00000000-0000-0000-0000-000000000000",
  },
  resourceGroupName: "sample-resource-group",
  vaultName: "sample-vault",
});

const vault3 = new azure_native.keyvault.Vault("vault3", {
  location: "westus",
  properties: {
    accessPolicies: [
      {
        objectId: "00000000-0000-0000-0000-000000000000",
        permissions: {
          certificates: [
            azure_native.keyvault.CertificatePermissions.Get,
            azure_native.keyvault.CertificatePermissions.List,
            azure_native.keyvault.CertificatePermissions.Delete,
            azure_native.keyvault.CertificatePermissions.Create,
            azure_native.keyvault.CertificatePermissions.Import,
            azure_native.keyvault.CertificatePermissions.Update,
            azure_native.keyvault.CertificatePermissions.Managecontacts,
            azure_native.keyvault.CertificatePermissions.Getissuers,
            azure_native.keyvault.CertificatePermissions.Listissuers,
            azure_native.keyvault.CertificatePermissions.Setissuers,
            azure_native.keyvault.CertificatePermissions.Deleteissuers,
            azure_native.keyvault.CertificatePermissions.Manageissuers,
            azure_native.keyvault.CertificatePermissions.Recover,
            azure_native.keyvault.CertificatePermissions.Purge,
          ],
          keys: [
            azure_native.keyvault.KeyPermissions.Encrypt,
            azure_native.keyvault.KeyPermissions.Decrypt,
            azure_native.keyvault.KeyPermissions.WrapKey,
            azure_native.keyvault.KeyPermissions.UnwrapKey,
            azure_native.keyvault.KeyPermissions.Sign,
            azure_native.keyvault.KeyPermissions.Verify,
            azure_native.keyvault.KeyPermissions.Get,
            azure_native.keyvault.KeyPermissions.List,
            azure_native.keyvault.KeyPermissions.Create,
            azure_native.keyvault.KeyPermissions.Update,
            azure_native.keyvault.KeyPermissions.Import,
            azure_native.keyvault.KeyPermissions.Delete,
            azure_native.keyvault.KeyPermissions.Backup,
            azure_native.keyvault.KeyPermissions.Restore,
            azure_native.keyvault.KeyPermissions.Recover,
            azure_native.keyvault.KeyPermissions.Purge,
          ],
          secrets: [
            azure_native.keyvault.SecretPermissions.Get,
            azure_native.keyvault.SecretPermissions.List,
            azure_native.keyvault.SecretPermissions.Set,
            azure_native.keyvault.SecretPermissions.Delete,
            azure_native.keyvault.SecretPermissions.Backup,
            azure_native.keyvault.SecretPermissions.Restore,
            azure_native.keyvault.SecretPermissions.Recover,
            azure_native.keyvault.SecretPermissions.Purge,
          ],
        },
        tenantId: "00000000-0000-0000-0000-000000000000",
      },
    ],
    enabledForDeployment: true,
    enabledForDiskEncryption: true,
    enabledForTemplateDeployment: true,
    publicNetworkAccess: azure_native.keyvault.PublicNetworkAccess.Disabled,
    sku: {
      family: azure_native.keyvault.SkuFamily.A,
      name: azure_native.keyvault.SkuName.Standard,
    },
    tenantId: "00000000-0000-0000-0000-000000000000",
  },
  resourceGroupName: "sample-resource-group",
  vaultName: "sample-vault",
});
